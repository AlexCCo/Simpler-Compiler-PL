package ascendant.syntacticParser.auto.ascendentVersion;
/* java -cp cup.jar java_cup.Main -parser SyntacticParser -symbols LexicalClass -nopositions SyntacticGeneratorASC.cup */

import java_cup.runtime.*;
import ascendant.lexicalScanner.*;
import ast.*;
import ast.Dec.*;
import ast.Inst.*;

scan with {: return getScanner().next_token(); :};
action code {:
    private ASConstructor semantic = new ASConstructor();
:};
parser code {:
   public void syntax_error(Symbol unidadLexica){
     System.out.println("ERROR fila "+((LexicalUnitCUP)unidadLexica).row()+": Elemento inexperado "+unidadLexica.value);
     System.exit(1);
   }
:};

init with {:
   LexicalScannerCUP alex = (LexicalScannerCUP)getScanner();
:};

terminal    OPERATOR_ADD, OPERATOR_MINUS, OPERATOR_DIV, OPERATOR_MUL, OPERATOR_LESS_THAN,
            OPERATOR_LESS_EQUAL_THAN, OPERATOR_GREATER_THAN, OPERATOR_GREATER_EQUAL_THAN,
            OPERATOR_EQUAL, OPERATOR_NOT_EQUAL, OPERATOR_ASSIGNMENT,
            LOGICAL_OR, LOGICAL_AND, LOGICAL_NOT,
            EOI, EOD,
            OPEN_PARENTHESIS, CLOSE_PARENTHESIS;

terminal String VAR_NAME,
                INTEGER_NUM, REAL_NUM, BOOLEAN,
                REAL_TYPE, INT_TYPE, BOOL_TYPE;

non terminal Program S;
non terminal Dec SD, VAR;
non terminal Inst IS, INST;
non terminal E E0, E1, E2, E3, E4;
non terminal TipoE opE1, opE2, opE3, opE4;


S ::= SD: aDeSD EOD IS: aDeIS
        {: RESULT = semantic.prog_completo(aDeSD, aDeIS); System.out.println(RESULT.toString());:};




SD ::= SD: aDeSD EOI VAR: aDeVAR
        {: RESULT = semantic.decs_compuesta(aDeSD, aDeVAR); :};
SD ::= VAR: aDeVAR
        {: RESULT = aDeVAR; :};
VAR ::= INT_TYPE: aDeTYPE VAR_NAME: aDeVAR_NAME
        {: RESULT = semantic.decl(aDeTYPE, aDeVAR_NAME); :};
VAR ::= BOOL_TYPE: aDeTYPE VAR_NAME: aDeVAR_NAME
        {: RESULT = semantic.decl(aDeTYPE, aDeVAR_NAME); :};
VAR ::= REAL_TYPE: aDeTYPE VAR_NAME: aDeVAR_NAME
        {: RESULT = semantic.decl(aDeTYPE, aDeVAR_NAME); :};




IS  ::=   IS: aDeIS EOI INST: aDeINST
        {: RESULT = semantic.inst_compuesta(aDeIS, aDeINST); :};
IS  ::=  INST: aDeINST
        {: RESULT = aDeINST; :};
INST  ::=  VAR_NAME: aDeVarName OPERATOR_ASSIGNMENT E0: aDeE0
        {: RESULT = semantic.instruc(aDeVarName, aDeE0); :};



E0  ::=  E1: aDeE1Uno OPERATOR_ADD E0: aDeE0
        {:RESULT = semantic.suma(aDeE1Uno, aDeE0); :};
E0  ::=  E1: aDeE1Uno OPERATOR_MINUS E1: aDeE1Dos
        {:RESULT = semantic.resta(aDeE1Uno, aDeE1Dos); :};
E0  ::=  E1: aDeE1
        {:RESULT = aDeE1; :};



E1  ::=  E1: aDeE1 opE1: opTipo E2: aDeE2
    {: RESULT = semantic.exp(opTipo, aDeE1, aDeE2); :};

E1  ::=  E2: aDeE2
        {:RESULT = aDeE2; :};

opE1 ::= LOGICAL_AND
             {: RESULT = TipoE.AND; :};
opE1 ::= LOGICAL_OR: aDeOpTipo
            {: RESULT = TipoE.OR; :};



E2  ::=  E2: aDeE2 opE2: opTipo E3: aDeE3
        {: RESULT = semantic.exp(opTipo, aDeE2, aDeE3); :};

E2  ::=  E3: aDeE3
        {: RESULT = aDeE3; :};

opE2 ::= OPERATOR_LESS_THAN
            {: RESULT = TipoE.MENOR; :};
opE2 ::= OPERATOR_LESS_EQUAL_THAN
            {: RESULT = TipoE.MENORIG; :};
opE2 ::= OPERATOR_GREATER_THAN
            {: RESULT = TipoE.MAYOR; :};
opE2 ::= OPERATOR_GREATER_EQUAL_THAN
            {: RESULT = TipoE.MAYORIG; :};
opE2 ::= OPERATOR_EQUAL
            {: RESULT = TipoE.COMPARACION; :};
opE2 ::= OPERATOR_NOT_EQUAL
            {: RESULT = TipoE.DISTINTO; :};



E3  ::=  E4: aDeE4Uno opE3: opTipo E4: aDeE4Dos
          {: RESULT = semantic.exp(opTipo, aDeE4Uno, aDeE4Dos); :};
E3  ::=  E4: aDeE4
          {: RESULT = aDeE4; :};

opE3 ::= OPERATOR_DIV
            {: RESULT = TipoE.DIV; :};
opE3 ::= OPERATOR_MUL
            {: RESULT = TipoE.MUL; :};



E4  ::=  opE4: opTipo E4: aDeE4
            {: RESULT = semantic.exp(opTipo, aDeE4); :};

opE4 ::= LOGICAL_NOT
            {: RESULT = TipoE.NOT; :};
epE4 ::= OPERATOR_MINUS
            {: RESULT = TipoE.NEGATIVO; :};

E4  ::=  VAR_NAME: aDeVar
           {: RESULT = semantic.varName(aDeVar); :};
E4 ::=  BOOLEAN: aDeBoo
           {: RESULT = semantic.booleano(aDeBoo); :};
E4 ::= INTEGER_NUM: aDeNE
           {:RESULT = semantic.numEntero(aDeNE); :};
E4 ::= REAL_NUM: aDeNR
           {: RESULT = semantic.numReal(aDeNR); :};
E4  ::=  OPEN_PARENTHESIS E0: aDeE0 CLOSE_PARENTHESIS
            {: RESULT =  aDeE0; :};