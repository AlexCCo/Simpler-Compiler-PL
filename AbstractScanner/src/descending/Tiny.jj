options  {
  STATIC=false;
}  

PARSER_BEGIN(ConstructorASTTiny)
package descending;

import ast.*;

PARSER_END(ConstructorASTTiny)

  TOKEN:{<#sign:["+","-"]>}

  TOKEN:{<#digit:["0"-"9"]>}
  TOKEN:{<#posDigit:["1"-"9"]>}
  TOKEN:{<#char:["a"-"z","A"-"Z"]>}
  TOKEN:{<#intOr0:<posDigit><digit>*|"0">}
  TOKEN:{<#float:"."(<digit>*<posDigit>|"0")>}
  TOKEN:{<#exp:("e"|"E")<sign>?<intOr0>>}

  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"#"(~["\n"])*>}  

  TOKEN:{<OPERATOR_ADD:"+">}
  TOKEN:{<OPERATOR_MINUS:"-">}
  TOKEN:{<OPERATOR_DIV:"/">}
  TOKEN:{<OPERATOR_MUL:"*">}
  TOKEN:{<OPERATOR_LESS_THAN:"<">}
  TOKEN:{<OPERATOR_LESS_EQUAL_THAN:"<=">}
  TOKEN:{<OPERATOR_GREATER_THAN:">=">}
  TOKEN:{<OPERATOR_GREATER_EQUAL_THAN:">=">}
  TOKEN:{<OPERATOR_ASSIGNMENT:"=">}
  TOKEN:{<OPERATOR_EQUAL:"==">}
  TOKEN:{<OPERATOR_NOT_EQUAL:"!=">}
  TOKEN:{<LOGICAL_OR:"or">}
  TOKEN:{<LOGICAL_AND:"and">}
  TOKEN:{<LOGICAL_NOT:"not">}
  TOKEN:{<INTEGER_NUM:<sign>?<intOr0>>}
  TOKEN:{<REAL_NUM:<INTEGER_NUM>(<float>|<exp>|<float><exp>>}
  TOKEN:{<VAR_NAME:<char>(<char>|<digit>|_)*>}
  TOKEN:{<REAL_TYPE:"real">}
  TOKEN:{<INT_TYPE:"int">}
  TOKEN:{<BOOL_TYPE:"bool">}
  TOKEN:{<BOOLEAN:"true"|"false">}
  TOKEN:{<EOI:";">}
  TOKEN:{<EOD:"&&">}
  TOKEN:{<OPEN_PARENTHESIS:"(">}
  TOKEN:{<CLOSE_PARENTHESIS:")">}
  
  S Sp()    : {S ast;} {ast=S() <EOF> {return ast;}}
  S S()     : {ResulLDs ds; E aDeE0;} {<evalua> aDeE0=E0() ds=Ds()
                  {if (ds.hayDefinicion())
                      return as.evaluaDonde(aDeE0,ds.a());
                   else
                      return as.evalua(aDeE0);}}
    
  ResulLDs Ds()   : {LDs aOfLDs;} 
                     {<donde> aOfLDs = LDs() {return new ResulLDs(aOfLDs);} | 
                      {return new ResulLDs();} }
  
  LDs LDs()  : {ResulD d; LDs aOfRLDs;} {d=D() aOfRLDs=RLDs(as.cSimple(d.id(),d.exp())) 
                       {return aOfRLDs;}}
  LDs RLDs(LDs ahOfRLDs0) : {ResulD d; LDs aOfRLDs1;} 
                                {"," d=D() aOfRLDs1=RLDs(as.cCompuesta(ahOfRLDs0,d.id(),d.exp())) 
                                  {return aOfRLDs1;}| 
                                  {return ahOfRLDs0;} }
  ResulD D()    : {Token id; E aOfE0;} {id=<identificador> "=" aOfE0=E0() 
                           {return new ResulD(id.image,aOfE0);}}


  E E0()   : {E R0a;} 
              {R0a=R0(E1()) {return R0a;}} 

  E R0(E ah)   : {E E01a;} 
                  {"+" E01a=E0() {return ASConstructor.exp(TipoE.SUMA, ah, E01a);} | 
                    "-" E01a=E1() {return ASConstructor.exp(TipoE.RESTA, ah, E01a);} | 
                    {return ah;}} 


  E E0()   : {E aOfE1,aOfRE0;} {aOfE1=E1() aOfRE0=RE0(aOfE1) {return aOfRE0;}}
  E RE0(E ahOfRE0)  : {int op0; E aOfE1; E aOfRE0;} 
                            {op0=OP0() aOfE1=E1() aOfRE0=RE0(mkexp(op0,ahOfRE0,aOfE1)) 
                                  {return aOfRE0;}| 
                                   {return ahOfRE0;} }


  E E1()   : {E R1a;} 
              {R1a=R1(E2()) {return R1a;}} 

  E R1(E ah)   : {E R1a;} 
                  {R1a=ASConstructor.exp(opE1(), ah, E2()) {return R1a;} | 
                  {return ah;}} 


  E E2()   : {E R2a;} 
                  {R2a=R2(E3()) {return R2a;}} 

  E R2(E ah)   : {E R2a;} 
                  {R2a=ASConstructor.exp(opE2(), ah, E3()) {return R2a;} | 
                  {return ah;}} 


  E E3()   : {E R3a;} 
              {R3a=R3(E4()) {return R3a;}} 

  E R3(E ah)   : {E opE3a; E E4a;} 
                  {opE3a=opE3() E4a=E4() {return ASConstructor.exp(opE3a, ah, E4a);} | 
                  {return ah;}} 


  E E4()   : {E E5a; TipoE opE4a;} 
                  {opE4a=opE4() E5a=E5() {return ASConstructor.exp(opE4a, E5a);} | 
                    E5a=E5() {return E5a;}} 


  E E5()   : {E E5a; E terminala;} 
                  {terminala=terminal() {return terminala;} | 
                    E5a=E0() {return E5a;}} 


  E terminal()  : {Token t;} {t=<BOOLEAN> {return ASConstructor.booleano(t.image);} |
                                t=<VAR_NAME> {return ASConstructor.varName(t.image);} |
                                t=<INTEGER_NUM> {return ASConstructor.numEntero(t.image);} |
                                t=<REAL_NUM> {return ASConstructor.numReal(t.image);}}


  TipoE opE1()  : {} {<OPERATOR_ADD> {return TipoE.SUMA;} |
                     <OPERATOR_MINUS> {return TipoE.RESTA;}}

  TipoE opE2()  : {} {<OPERATOR_LESS_THAN> {return TipoE.MAYOR;} |
                    <OPERATOR_LESS_EQUAL_THAN> {return TipoE.MAYORIG;} |
                    <OPERATOR_GREATER_THAN> {return TipoE.MENOR;} |
                    <OPERATOR_GREATER_EQUAL_THAN> {return TipoE.MENORIG; |
                    <OPERATOR_EQUAL> {return TipoE.COMPARACION; |
                    <OPERATOR_NOT_EQUAL> {return TipoE.DISTINTO;}}

  TipoE opE3()  : {} {<OPERATOR_MUL> {return TipoE.MUL;} |
                    <OPERATOR_DIV> {return TipoE.DIV;}}
                    
  TipoE opE4()  : {} {<OPERATOR_MINUS> {return TipoE.NOT;} |
                    <LOGICAL_NOT> {return TipoE.RESTA;}}





                    



  
