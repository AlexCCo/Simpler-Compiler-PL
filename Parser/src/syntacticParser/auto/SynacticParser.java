/* SynacticParser.java */
/* Generated By:JavaCC: Do not edit this line. SynacticParser.java */
package syntacticParser.auto;

public class SynacticParser implements SynacticParserConstants {

  final public void S() throws ParseException {
    SD();
    jj_consume_token(21);
    IS();
  }

  final public void SD() throws ParseException {
    VAR();
    RSD();
  }

  final public void RSD() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 22:{
      jj_consume_token(22);
      VAR();
      RSD();
      break;
      }
    default:
      jj_la1[0] = jj_gen;

    }
  }

  final public void VAR() throws ParseException {
    jj_consume_token(tipo);
    jj_consume_token(nom_var);
  }

  final public void IS() throws ParseException {
    INST();
    RIS();
  }

  final public void RIS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 22:{
      jj_consume_token(22);
      INST();
      RIS();
      break;
      }
    default:
      jj_la1[1] = jj_gen;

    }
  }

  final public void INST() throws ParseException {
    jj_consume_token(nom_var);
    jj_consume_token(23);
    E0();
  }

  final public void E0() throws ParseException {
    E1();
    R0();
  }

  final public void R0() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case opAdd:{
      jj_consume_token(opAdd);
      E0();
      break;
      }
    case opMinus:{
      jj_consume_token(opMinus);
      E1();
      break;
      }
    default:
      jj_la1[2] = jj_gen;

    }
  }

  final public void E1() throws ParseException {
    E2();
    R1();
  }

  final public void R1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case opE1:{
      jj_consume_token(opE1);
      E2();
      R1();
      break;
      }
    default:
      jj_la1[3] = jj_gen;

    }
  }

  final public void E2() throws ParseException {
    E3();
    R2();
  }

  final public void R2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case opE2:{
      jj_consume_token(opE2);
      E3();
      R2();
      break;
      }
    default:
      jj_la1[4] = jj_gen;

    }
  }

  final public void E3() throws ParseException {
    E4();
    R3();
  }

  final public void R3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case opE3:{
      jj_consume_token(opE3);
      E4();
      break;
      }
    default:
      jj_la1[5] = jj_gen;

    }
  }

  final public void E4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case opE4:{
      jj_consume_token(opE4);
      E4();
      break;
      }
    case opMinus:{
      jj_consume_token(opMinus);
      E4();
      break;
      }
    case 24:{
      jj_consume_token(24);
      E0();
      jj_consume_token(25);
      break;
      }
    case num_ent:
    case num_real:
    case b00lean:
    case nom_var:{
      terminal();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void terminal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case nom_var:{
      jj_consume_token(nom_var);
      break;
      }
    case num_ent:{
      jj_consume_token(num_ent);
      break;
      }
    case num_real:{
      jj_consume_token(num_real);
      break;
      }
    case b00lean:{
      jj_consume_token(b00lean);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public SynacticParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400000,0x400000,0xc0000,0x8000,0x10000,0x20000,0x1186c00,0x102c00,};
   }

  /** Constructor with InputStream. */
  public SynacticParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SynacticParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SynacticParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SynacticParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SynacticParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SynacticParser(SynacticParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SynacticParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                             }
