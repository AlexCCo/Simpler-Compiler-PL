options  {
  STATIC=false;
}  
PARSER_BEGIN(SynacticParser)
package syntacticParser.auto;

public class SynacticParser {}
PARSER_END(SynacticParser)
  TOKEN:{<#chr:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digit:["0"-"9"]>}
  TOKEN:{<#posDigit:["1"-"9"]>}
  TOKEN:{<#enter0:<posDigit>(<digit>)* |"0">}
  TOKEN:{<#flt:"."((<digit>)*<posDigit>|"0")>}
  TOKEN:{<#sign: "+"|"-">}
  TOKEN:{<#exp:("e"|"E")(<sign>)?<enter0>>}

  SKIP:{<["\t"," ","\r","\b","\n"]>}
  SKIP:{<"#"(~["\n"])*>}

  TOKEN:{<num_ent: (<sign>)?<enter0> >}
  TOKEN:{<num_real: <num_ent>(<flt>|<exp>|<flt><exp>)>}

  TOKEN:{<tipo:"ent"|"real"|"bool">}
  TOKEN:{<b00lean:"true"|"false">}
  TOKEN:{<opE4:"not">}
  TOKEN:{<opE1:"and"|"or">}
  TOKEN:{<opE2:"<"|"<="|">"|">="|"=="|"!=">}
  TOKEN:{<opE3:"*"|"/">}
  TOKEN:{<opAdd:"+">}
  TOKEN:{<opMinus:"-">}
  TOKEN:{<nom_var:<chr>(<chr>|<digit>|"_")*>}

  void S()    : {} {SD() "&&" IS()}

  void SD()    : {} {VAR() RSD()}
  void RSD()   : {} {";" VAR() RSD() | {}}
  void VAR()    : {} {<tipo> <nom_var>}

  void IS()    : {} {INST() RIS()}
  void RIS()   : {} {";" INST() RIS() | {}}
  void INST()    : {} {<nom_var> "=" E0()}

  void E0()    : {} {E1() R0()}
  void R0()   : {} {<opAdd> E0() | <opMinus> E1() | {}}

  void E1()    : {} {E2() R1()}
  void R1()   : {} {<opE1> E2() R1() | {}}

  void E2()    : {} {E3() R2()}
  void R2()   : {} {<opE2> E3() R2() | {}}

  void E3()    : {} {E4() R3()}
  void R3()   : {} {<opE3> E4() | {}}

  void E4()   : {} {<opE4> E4() | <opMinus> E4() | "(" E0() ")" | terminal()}

  void terminal() : {}{<nom_var>|<num_ent>|<num_real>|<b00lean>}