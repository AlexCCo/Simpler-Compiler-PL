package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal    OPERATOR_ADD, OPERATOR_MINUS, OPERATOR_DIV, OPERATOR_MUL, OPERATOR_LESS_THAN,
            OPERATOR_LESS_EQUAL_THAN, OPERATOR_GREATER_THAN, OPERATOR_GREATER_EQUAL_THAN,
            OPERATOR_EQUAL, OPERATOR_NOT_EQUAL, OPERATOR_ASSIGNMENT, LOGICAL_OR,
            LOGICAL_AND, LOGICAL_NOT, INTEGER_NUM, REAL_NUM, VAR_NAME, REAL_TYPE,
            INT_TYPE, BOOL_TYPE, BOOLEAN, EOI, EOD, OPEN_PARENTHESIS, CLOSE_PARENTHESIS,
            EOF;

non terminal  S, SD, VAR, IS, INST, E0, E1, E2, E3, E4, opE1, opE2, opE3, opE4;

S ::= SD EOD IS;

SD ::= SD EOI VAR;
SD ::= VAR;
VAR ::= INT_TYPE VAR_NAME | BOOL_TYPE VAR_NAME | REAL_TYPE VAR_NAME;

IS  ::=   IS EOI INST;
IS  ::=  INST;
INST  ::=  VAR_NAME OPERATOR_ASSIGNMENT E0;

E0  ::=  E1 OPERATOR_ADD E0;
E0  ::=  E1 OPERATOR_MINUS E1;
E0  ::=  E1;

E1  ::=  E1 opE1 E2;
E1  ::=  E2;
opE1 ::= LOGICAL_AND | LOGICAL_OR;

E2  ::=  E2 opE2 E3;
E2  ::=  E3;
opE2 ::= OPERATOR_LESS_THAN | OPERATOR_LESS_EQUAL_THAN |
         OPERATOR_GREATER_THAN | OPERATOR_GREATER_EQUAL_THAN |
         OPERATOR_EQUAL | OPERATOR_NOT_EQUAL;

E3  ::=  E4 opE3 E4;
E3  ::=  E4;
opE3 ::= OPERATOR_DIV | OPERATOR_MUL;

E4  ::=  opE4 E4;
opE4 ::= LOGICAL_NOT | OPERATOR_MINUS;
E4  ::=  VAR_NAME | BOOLEAN | INTEGER_NUM | REAL_NUM;
E4  ::=  OPEN_PARENTHESIS E0 CLOSE_PARENTHESIS;