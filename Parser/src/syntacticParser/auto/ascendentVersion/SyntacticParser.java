
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Mar 12 22:05:40 CET 2020
//----------------------------------------------------

package syntacticParser.auto.ascendentVersion;

import java_cup.runtime.*;
import lexicalScanner.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Mar 12 22:05:40 CET 2020
  */
public class SyntacticParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntacticParser() {super();}

  /** Constructor which sets the default scanner. */
  public SyntacticParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\005\005\000\002\005\003\000" +
    "\002\006\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\003\000\002\010\005\000\002\010\003\000\002\014" +
    "\003\000\002\014\003\000\002\011\005\000\002\011\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\012\005\000\002\012\003\000\002\016\003\000\002\016" +
    "\003\000\002\013\004\000\002\017\003\000\002\017\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\010\026\005\027\010\030\007\001\002\000" +
    "\006\031\ufffe\032\ufffe\001\002\000\004\025\072\001\002" +
    "\000\004\002\071\001\002\000\004\025\070\001\002\000" +
    "\004\025\067\001\002\000\006\031\013\032\012\001\002" +
    "\000\004\025\017\001\002\000\010\026\005\027\010\030" +
    "\007\001\002\000\006\031\uffff\032\uffff\001\002\000\006" +
    "\002\ufff9\031\ufff9\001\002\000\006\002\001\031\065\001" +
    "\002\000\004\016\020\001\002\000\020\005\024\021\034" +
    "\022\026\023\022\024\023\025\025\033\035\001\002\000" +
    "\020\005\024\021\034\022\026\023\022\024\023\025\025" +
    "\033\035\001\002\000\040\002\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\017\uffde\020\uffde\031\uffde\034\uffde\001\002\000" +
    "\040\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0\020" +
    "\uffe0\031\uffe0\034\uffe0\001\002\000\020\005\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\033\uffe2\001\002\000" +
    "\040\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1\020" +
    "\uffe1\031\uffe1\034\uffe1\001\002\000\040\002\uffdf\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\017\uffdf\020\uffdf\031\uffdf\034\uffdf" +
    "\001\002\000\040\002\uffe7\004\uffe7\005\uffe7\006\061\007" +
    "\060\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\017\uffe7\020\uffe7\031\uffe7\034\uffe7\001\002\000\034\002" +
    "\uffef\004\uffef\005\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\017\uffef\020\uffef\031\uffef\034\uffef\001" +
    "\002\000\034\002\ufff3\004\ufff3\005\ufff3\010\054\011\050" +
    "\012\055\013\053\014\051\015\052\017\ufff3\020\ufff3\031" +
    "\ufff3\034\ufff3\001\002\000\020\002\ufff5\004\044\005\042" +
    "\017\041\020\043\031\ufff5\034\ufff5\001\002\000\006\002" +
    "\ufff8\031\ufff8\001\002\000\020\005\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\033\uffe3\001\002\000\020\005" +
    "\024\021\034\022\026\023\022\024\023\025\025\033\035" +
    "\001\002\000\004\034\037\001\002\000\040\002\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\017\uffdd\020\uffdd\031\uffdd\034" +
    "\uffdd\001\002\000\020\005\024\021\034\022\026\023\022" +
    "\024\023\025\025\033\035\001\002\000\020\005\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\033\ufff1\001\002" +
    "\000\020\005\024\021\034\022\026\023\022\024\023\025" +
    "\025\033\035\001\002\000\020\005\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\033\ufff2\001\002\000\020\005" +
    "\024\021\034\022\026\023\022\024\023\025\025\033\035" +
    "\001\002\000\010\002\ufff7\031\ufff7\034\ufff7\001\002\000" +
    "\014\002\ufff6\017\041\020\043\031\ufff6\034\ufff6\001\002" +
    "\000\034\002\ufff4\004\ufff4\005\ufff4\010\054\011\050\012" +
    "\055\013\053\014\051\015\052\017\ufff4\020\ufff4\031\ufff4" +
    "\034\ufff4\001\002\000\020\005\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\033\uffed\001\002\000\020\005\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\033\uffea\001" +
    "\002\000\020\005\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\033\uffe9\001\002\000\020\005\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\033\uffeb\001\002\000\020" +
    "\005\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\033" +
    "\uffee\001\002\000\020\005\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\025\uffec\033\uffec\001\002\000\020\005\024\021" +
    "\034\022\026\023\022\024\023\025\025\033\035\001\002" +
    "\000\034\002\ufff0\004\ufff0\005\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0\031\ufff0" +
    "\034\ufff0\001\002\000\020\005\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\033\uffe5\001\002\000\020\005\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\033\uffe6\001" +
    "\002\000\020\005\024\021\034\022\026\023\022\024\023" +
    "\025\025\033\035\001\002\000\034\002\uffe8\004\uffe8\005" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\017\uffe8\020\uffe8\031\uffe8\034\uffe8\001\002\000\040\002" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4\020\uffe4\031" +
    "\uffe4\034\uffe4\001\002\000\004\025\017\001\002\000\006" +
    "\002\ufffa\031\ufffa\001\002\000\006\031\ufffd\032\ufffd\001" +
    "\002\000\006\031\ufffc\032\ufffc\001\002\000\004\002\000" +
    "\001\002\000\006\031\ufffb\032\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\010\002\005\003\010\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\015\006\014\001\001\000\004\004\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\032\010\031\011\030\012\027\013\026" +
    "\017\020\001\001\000\006\013\063\017\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\061\001\001\000" +
    "\002\001\001\000\004\015\055\001\001\000\004\014\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\035\010\031\011\030\012\027\013\026\017\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\046\012" +
    "\027\013\026\017\020\001\001\000\002\001\001\000\014" +
    "\010\045\011\030\012\027\013\026\017\020\001\001\000" +
    "\002\001\001\000\016\007\044\010\031\011\030\012\027" +
    "\013\026\017\020\001\001\000\002\001\001\000\004\014" +
    "\037\001\001\000\004\015\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\056\013\026" +
    "\017\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\062\017\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

   LexicalScannerCUP alex = (LexicalScannerCUP)getScanner();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


   public void syntax_error(Symbol unidadLexica){
     System.out.println("ERROR fila "+((LexicalUnitCUP)unidadLexica).row()+": Elemento inexperado "+unidadLexica.value);
     System.exit(1);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntacticParser$actions {
  private final SyntacticParser parser;

  /** Constructor */
  CUP$SyntacticParser$actions(SyntacticParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticParser$do_action_part00000000(
    int                        CUP$SyntacticParser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticParser$parser,
    java.util.Stack            CUP$SyntacticParser$stack,
    int                        CUP$SyntacticParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticParser$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= SD EOD IS 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticParser$parser.done_parsing();
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SD ::= SD EOI VAR 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("SD",1, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SD ::= VAR 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("SD",1, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VAR ::= INT_TYPE VAR_NAME 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("VAR",2, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VAR ::= BOOL_TYPE VAR_NAME 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("VAR",2, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VAR ::= REAL_TYPE VAR_NAME 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("VAR",2, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IS ::= IS EOI INST 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("IS",3, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IS ::= INST 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("IS",3, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= VAR_NAME OPERATOR_ASSIGNMENT E0 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("INST",4, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E0 ::= E1 OPERATOR_ADD E0 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E0",5, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E0 ::= E1 OPERATOR_MINUS E1 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E0",5, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E0",5, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E1 ::= E1 opE1 E2 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E1",6, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E1",6, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opE1 ::= LOGICAL_AND 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("opE1",10, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opE1 ::= LOGICAL_OR 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("opE1",10, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E2 ::= E2 opE2 E3 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E2",7, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E2",7, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opE2 ::= OPERATOR_LESS_THAN 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("opE2",11, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opE2 ::= OPERATOR_LESS_EQUAL_THAN 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("opE2",11, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opE2 ::= OPERATOR_GREATER_THAN 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("opE2",11, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opE2 ::= OPERATOR_GREATER_EQUAL_THAN 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("opE2",11, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opE2 ::= OPERATOR_EQUAL 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("opE2",11, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // opE2 ::= OPERATOR_NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("opE2",11, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E3 ::= E4 opE3 E4 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E3",8, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E3",8, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opE3 ::= OPERATOR_DIV 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("opE3",12, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opE3 ::= OPERATOR_MUL 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("opE3",12, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E4 ::= opE4 E4 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E4",9, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // opE4 ::= LOGICAL_NOT 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("opE4",13, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opE4 ::= OPERATOR_MINUS 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("opE4",13, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E4 ::= VAR_NAME 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E4",9, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E4 ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E4",9, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E4 ::= INTEGER_NUM 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E4",9, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E4 ::= REAL_NUM 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E4",9, RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E4 ::= OPEN_PARENTHESIS E0 CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("E4",9, RESULT);
            }
          return CUP$SyntacticParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticParser$do_action(
    int                        CUP$SyntacticParser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticParser$parser,
    java.util.Stack            CUP$SyntacticParser$stack,
    int                        CUP$SyntacticParser$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticParser$do_action_part00000000(
                               CUP$SyntacticParser$act_num,
                               CUP$SyntacticParser$parser,
                               CUP$SyntacticParser$stack,
                               CUP$SyntacticParser$top);
    }
}

