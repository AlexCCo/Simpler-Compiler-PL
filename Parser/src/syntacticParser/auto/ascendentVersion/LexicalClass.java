
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Mar 12 22:05:40 CET 2020
//----------------------------------------------------

package syntacticParser.auto.ascendentVersion;

/** CUP generated class containing symbol constants. */
public class LexicalClass {
  /* terminals */
  public static final int OPEN_PARENTHESIS = 25;
  public static final int REAL_TYPE = 20;
  public static final int OPERATOR_GREATER_EQUAL_THAN = 9;
  public static final int OPERATOR_MUL = 5;
  public static final int OPERATOR_EQUAL = 10;
  public static final int OPERATOR_NOT_EQUAL = 11;
  public static final int LOGICAL_AND = 14;
  public static final int BOOL_TYPE = 22;
  public static final int BOOLEAN = 18;
  public static final int EOI = 23;
  public static final int LOGICAL_NOT = 15;
  public static final int OPERATOR_ASSIGNMENT = 12;
  public static final int EOF = 0;
  public static final int EOD = 24;
  public static final int VAR_NAME = 19;
  public static final int OPERATOR_LESS_THAN = 6;
  public static final int error = 1;
  public static final int OPERATOR_LESS_EQUAL_THAN = 7;
  public static final int INT_TYPE = 21;
  public static final int REAL_NUM = 17;
  public static final int OPERATOR_GREATER_THAN = 8;
  public static final int OPERATOR_MINUS = 3;
  public static final int CLOSE_PARENTHESIS = 26;
  public static final int OPERATOR_DIV = 4;
  public static final int OPERATOR_ADD = 2;
  public static final int LOGICAL_OR = 13;
  public static final int INTEGER_NUM = 16;


  public static String valueOf(int enumValue) {
    String returnValue = null;
    switch (enumValue) {
      case OPERATOR_ADD:
        returnValue = "+";
        break;
      case OPERATOR_MINUS:
        returnValue = "-";
        break;
      case OPERATOR_DIV:
        returnValue = "/";
        break;
      case OPERATOR_MUL:
        returnValue = "*";
        break;
      case OPERATOR_LESS_THAN:
        returnValue = "<";
        break;
      case OPERATOR_LESS_EQUAL_THAN:
        returnValue = "<=";
        break;
      case OPERATOR_GREATER_THAN:
        returnValue = ">";
        break;
      case OPERATOR_GREATER_EQUAL_THAN:
        returnValue = ">=";
        break;
      case OPERATOR_EQUAL:
        returnValue = "==";
        break;
      case OPERATOR_NOT_EQUAL:
        returnValue = "!=";
        break;
      case OPERATOR_ASSIGNMENT:
        returnValue = "==";
        break;
      case LOGICAL_OR:
        returnValue = "or";
        break;
      case LOGICAL_AND:
        returnValue = "and";
        break;
      case LOGICAL_NOT:
        returnValue = "not";
        break;
      case INTEGER_NUM:
        returnValue = "int number";
        break;
      case REAL_NUM:
        returnValue = "real number";
        break;
      case VAR_NAME:
        returnValue = "variable name";
        break;
      case REAL_TYPE:
        returnValue = "real type";
        break;
      case INT_TYPE:
        returnValue = "int type";
        break;
      case BOOL_TYPE:
        returnValue = "bool type";
        break;
      case BOOLEAN:
        returnValue = "bool value";
        break;
      case EOI:
        returnValue = ";";
        break;
      case EOD:
        returnValue = "&&";
        break;
      case OPEN_PARENTHESIS:
        returnValue = "(";
        break;
      case CLOSE_PARENTHESIS:
        returnValue = ")";
        break;
      case EOF:
        returnValue = "EOF";
        break;
    }
    return returnValue;
  }
}

